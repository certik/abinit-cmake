#!/usr/bin/env python
#
# Copyright (c) 2005-2008 ABINIT Group (Yann Pouillon)
# All rights reserved.
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

from time import gmtime,strftime

import commands
import os
import re
import sys

# ---------------------------------------------------------------------------- #

#
# Subroutines
#

# Makefile header
def makefile_header(name,stamp):

 return """#
# Makefile for ABINIT                                      -*- Automake -*-
# Generated by %s on %s

#
# IMPORTANT NOTE
#
# Any manual change to this file will systematically be overwritten.
# Please modify the %s script or its config file instead.
#

AM_CPPFLAGS = @CPPFLAGS_OPT@
AM_CFLAGS   = @CFLAGS_OPT@
AM_LDFLAGS  = @CC_LDFLAGS_OPT@

bin_PROGRAMS = timeout

timeout_SOURCES = timeout.c

""" % (name,stamp,name)



# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name    = "make-makefiles-nightly"
my_configs = ["config/specs/binaries.cf"]
my_output  = "src/nightly/Makefile.am"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("src/main/abinit.F90") ):
 print "%s: You must be in the top of an ABINIT source tree." % my_name
 print "%s: Aborting now." % my_name
 sys.exit(1)

# Read config file(s)
for cnf in my_configs:
 if ( os.path.exists(cnf) ):
  execfile(cnf)
 else:
  print "%s: Could not find config file (%s)." % (my_name,cnf)
  print "%s: Aborting now." % my_name
  sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Write Makefile.am core
mf = file(my_output,"w")
mf.write(makefile_header(my_name,now))

# Init extra file list
ext = ""

# Include additional hand-made information
add = "src/nightly/abinit.amf"
if ( os.path.exists(add) ):
 ext += " \\\n\tabinit.amf"

# Include RoboDOC header
hdr = "src/nightly/_nightly_"
if ( os.path.exists(hdr) ):
 ext += " \\\n\t_nightly_"

# Write list of extra files
if ( ext != "" ):
 mf.write("EXTRA_DIST ="+ext+"\n")

# Write additional hand-made information
if ( os.path.exists(add) ):
 mf.write("\n"+file(add,"r").read())

mf.close()
