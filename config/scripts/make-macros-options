#!/usr/bin/env python
#
# Copyright (c) 2005-2008 ABINIT Group (Yann Pouillon)
# All rights reserved.
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

from time import gmtime,strftime

import commands
import os
import re
import sys

# ---------------------------------------------------------------------------- #

#
# Subroutines
#

# Macro header
def macro_header(name,stamp):

 return """# Generated by %s on %s

#
# Command-line options for the "configure" script
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the %s
# script. If you try to edit it, your changes will systematically be
# overwritten.
#
""" % (name,stamp,name)



# Define macro header
def macro_define_header():

 return """


# ABI_OPTIONS_DEFINE()
# --------------------
#
# Declares command-line arguments for the "configure" script.
#
AC_DEFUN([ABI_OPTIONS_DEFINE],
[
"""



# Define macro footer
def macro_define_footer():

 return "]) # ABI_OPTIONS_DEFINE\n"



# Init macro header
def macro_setup_header():

 return """


# ABI_OPTIONS_SETUP()
# -------------------
#
# Sets the default values of command-line arguments.
#
AC_DEFUN([ABI_OPTIONS_SETUP],
[
"""



# Init macro footer
def macro_setup_footer():

 return "]) # ABI_OPTIONS_SETUP\n"



# Backup macro header
def macro_backup_header():

 return """


# ABI_OPTIONS_BACKUP()
# --------------------
#
# Saves all command-line arguments.
#
AC_DEFUN([ABI_OPTIONS_BACKUP],
[
"""



# Backup macro footer
def macro_backup_footer():

 return "]) # ABI_OPTIONS_BACKUP\n"



# Restore macro header
def macro_recall_header():

 return """


# ABI_OPTIONS_RECALL()
# --------------------
#
# Restores all previously-saved command-line arguments.
#
AC_DEFUN([ABI_OPTIONS_RECALL],
[
"""



# Restore macro footer
def macro_recall_footer():

 return "]) # ABI_OPTIONS_RECALL\n"



# Changed options macro
def macro_changed_template():

 return """


dnl ABI_OPTIONS_CHANGED()
dnl ---------------------
dnl
dnl Display changes of user interface between versions and warns about
dnl obsolete uses.
dnl
AC_DEFUN([ABI_OPTIONS_CHANGED],
[AC_MSG_NOTICE([reporting user interface changes:])
@MACRO@
]) dnl ABI_OPTIONS_CHANGED
"""



# Parsing macro
def macro_parse_template():

 return """


dnl ABI_OPTIONS_PARSE()
dnl -------------------
dnl
dnl Parses command-line arguments.
dnl
AC_DEFUN([ABI_OPTIONS_PARSE],
[
 AC_REQUIRE([AC_PROG_EGREP])
 AC_MSG_NOTICE([parsing command-line options])
@MACRO@
]) dnl ABI_OPTIONS_PARSE
"""



def parse_opt(opt,values):

 ret = " dnl Parse %s\n" % (opt)

 if ( len(values.split()) > 1 ):
  ret += """ if test "${%s}" != ""; then
  for v in `echo "${%s}" | sed -e 's/,/ /g'`; do
   opt_ok="no"
   for r in %s; do
    if test "${v}" = "${r}";then
     opt_ok="yes"
     break
    fi
   done
   test "${opt_ok}" = "no" && break
  done
  if test "${opt_ok}" = "no"; then
   r=`echo "%s" | sed -e 's/^[[ ]]*//; s/[[ ]]*$//; s/[[ ]][[ ]]*/ /g; s/ /|/g'`
   AC_MSG_WARN([%s = (${r})])
   AC_MSG_ERROR([invalid option: %s = ${v}])
  fi
 fi
""" % (opt,opt,values,values,opt,opt)

 else:

  if ( values == "@float" ):
   ret += """ if test "${%s}" != ""; then
  opt_ok="no"
  test "`echo "${%s}" | \\
   ${EGREP} -e '^-?[[0-9]]+\.[[0-9]]+$'`" != "" && opt_ok="yes"
  test "`echo "${%s}" | \\
   ${EGREP} -e '^-?[[0-9]]+\.[[0-9]]+[[Ee]]-?[[0-9]]+$'`" != "" && opt_ok="yes"
  if test "${opt_ok}" = "no"; then
   AC_MSG_ERROR([invalid float: %s = ${%s}])
  fi
 fi
""" % (opt,opt,opt,opt,opt)

  elif ( values == "@includes" ):
   ret += """ if test "${%s}" != ""; then
  opt_ok="yes"
  for v in ${%s}; do
   if test "`echo "${v}" | grep '^-I'`" = ""; then
    opt_ok="no"
    break
   fi
  done
  if test "${opt_ok}" = "no"; then
   AC_MSG_ERROR([invalid include statement in %s: ${v}])
  fi
 fi
""" % (opt,opt,opt)

  elif ( values == "@integer" ):
   ret += """ if test "${%s}" != ""; then
  opt_ok="yes"
  test "`echo "${%s}" | ${EGREP} -e '^-?[[0-9]]+$'`" = "" && opt_ok="no"
  if test "${opt_ok}" = "no"; then
   AC_MSG_ERROR([invalid integer: %s = ${%s}])
  fi
 fi
""" % (opt,opt,opt,opt)

  elif ( values == "@libs" ):
   ret += """ if test "${%s}" != ""; then
  opt_ok="yes"
  for v in ${%s}; do
   if test "`echo "${v}" | grep '^-[[Ll]]'`" = ""; then
    opt_ok="no"
    break
   fi
  done
  if test "${opt_ok}" = "no"; then
   AC_MSG_ERROR([invalid library statement in %s: ${v}])
  fi
 fi
""" % (opt,opt,opt)

  elif ( values == "@linalg" ):
   ret += """ if test "${%s}" != ""; then
  opt_ok="no"
  for v in ${linalg_supported_types}; do
   if test "${%s}" = "${v}"; then
    opt_ok="yes"
    break
   fi
  done
  if test "${opt_ok}" = "no"; then
   AC_MSG_ERROR([unsupported linear algebra implementation: ${%s}])
  fi
 fi
""" % (opt,opt,opt)

  else:

   ret += " dnl FIXME: NOT IMPLEMENTED!\n"

 return ret



# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name    = "make-macros-options"
my_configs = ["config/specs/options.cf"]
my_output  = "config/m4/do-not-edit-options.m4"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("src/main/abinit.F90") ):
 print "%s: You must be in the top of an ABINIT source tree." % my_name
 print "%s: Aborting now." % my_name
 sys.exit(1)

# Read config file(s)
for cnf in my_configs:
 if ( os.path.exists(cnf) ):
  execfile(cnf)
 else:
  print "%s: Could not find config file (%s)." % (my_name,cnf)
  print "%s: Aborting now." % my_name
  sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Start writing macro
m4 = file(my_output,"w")
m4.write(macro_header(my_name,now))

# Start writing define macro
m4.write(macro_define_header())

# Process arguments
defaults = ""
parse = ""
for arg in ("enable","with"):
 m4.write("\n dnl\n dnl --%s arguments\n dnl\n" % (arg))
 defaults += "\n dnl\n dnl --%s arguments\n dnl\n\n" % (arg)
 for opt in eval("ac_args_%s" % (arg)):
  var = re.sub("-","_",opt[0])
  m4.write("\n AC_ARG_%s(%s,\n" % (arg.upper(),opt[0]) \
   + "  AC_HELP_STRING([--%s-%s],\n   [%s (default: %s)]))\n" % \
    (arg,opt[0],opt[1],opt[2]))

  if ( opt[2] != None ):
   defaults += " if test \"${%s_%s}\" = \"\"; then\n  %s_%s=\"%s\"\n fi\n" % \
    (arg,var,arg,var,opt[2])

  if ( (opt[3] != None) and (opt[3] != "") ):
   parse += "\n"+parse_opt(arg+"_"+var,opt[3])
  elif ( arg == "enable" ):
   parse += "\n"+parse_opt(arg+"_"+var,"yes no")

  m4.write(" AC_SUBST(%s_%s)\n" % (arg,var))

# Finish writing define macro
m4.write(macro_define_footer())

# Start writing setup macro
m4.write(macro_setup_header())

# Process arguments
m4.write(defaults)

# Finish writing setup macro
m4.write(macro_setup_footer())

# Start writing backup macro
m4.write(macro_backup_header())

# Process arguments
for arg in ("enable","with"):
 m4.write("\n dnl\n dnl --%s arguments\n dnl\n" % (arg))
 for opt in eval("ac_args_%s" % (arg)):
  var = re.sub("-","_",opt[0])
  m4.write(" cmd_%s_%s=\"${%s_%s}\"\n" % (arg,var,arg,var))

# Do not forget "prefix"
m4.write("""
 dnl
 dnl Prefix
 dnl
 if test "${prefix}" != "NONE"; then
  cmd_prefix="${prefix}"
 fi
""")

# Finish writing backup macro
m4.write(macro_backup_footer())

# Start writing recall macro
m4.write(macro_recall_header())

# Process arguments
for arg in ("enable","with"):
 m4.write("\n dnl\n dnl --%s arguments\n dnl\n" % (arg))
 for opt in eval("ac_args_%s" % (arg)):
  var = re.sub("-","_",opt[0])
  m4.write("\n if test \"${cmd_%s_%s}\" != \"\"; then\n  %s_%s=\"${cmd_%s_%s}\"\n fi\n" % \
   (arg,var,arg,var,arg,var))

# Do not forget "prefix"
m4.write("""
 dnl
 dnl Prefix
 dnl
 if test "${cmd_prefix}" != ""; then
  prefix="${cmd_prefix}"
 fi
""")

# Finish writing recall macro
m4.write(macro_recall_footer())

# Build changed macro
changed = ""
for (arg1,arg2) in ac_args_changed:

 # Removed options
 if ( arg2 == None ):
  changed += """
 dnl Removed --%s option
 AC_MSG_NOTICE([ * --%s removed"])
 if test "${%s}" != ""; then
  AC_MSG_WARN([option --%s has been used])
 fi
""" % (arg1,arg1,re.sub("-","_",arg1),arg1)

 # New options
 elif ( arg1 == None ):
  changed += "\n dnl New --%s option\n" % (arg2)
  changed += " AC_MSG_NOTICE([ * new option --%s is available])\n" % (arg2)

 # Changed UIs
 elif ( arg1 == arg2 ):
  changed += """
 dnl UI change for --%s option
 AC_MSG_NOTICE([ * --%s has a new meaning])
 AC_MSG_NOTICE([   please check that %s="${%s}" is OK for you])
""" % (arg1,arg1,arg1,re.sub("-","_",arg1))

 # Renamed options
 else:
  changed += """
 dnl --%s > --%s
 AC_MSG_NOTICE([ * --%s renamed --%s])
 if test "${%s}" != ""; then
  AC_MSG_WARN([option --%s has been used])
 fi
""" % (arg1,arg2,arg1,arg2,re.sub("-","_",arg1),arg1)

# Write changed macro
m4.write(re.sub("@MACRO@",changed,macro_changed_template()))

# Write parse macro
m4.write(re.sub("@MACRO@",parse,macro_parse_template()))

# Finish
m4.close()

tmp = commands.getoutput("./config/scripts/add-header-typed Autoconf %s" % (my_output))
if ( tmp != "" ):
 print tmp

# Write option dumper (for debugging)
dumper = file("config.dump.in","a")
dumper.write("# Command-line options\n")
for arg in ("enable","with"):
 for opt in eval("ac_args_%s" % (arg)):
  var = re.sub("-","_",opt[0])
  dumper.write("%s_%s=\"@%s_%s@\"\n" % (arg,var,arg,var))
dumper.write("\n")
dumper.close()
