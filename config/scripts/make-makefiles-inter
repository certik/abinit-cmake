#!/usr/bin/env python
#
# Copyright (c) 2005-2008 ABINIT Group (Yann Pouillon)
# All rights reserved.
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

from time import gmtime,strftime

import commands
import os
import re
import sys

# ---------------------------------------------------------------------------- #

#
# Subroutines
#

# Makefile header
def makefile_header(name,stamp):

 return """#
# Makefile for ABINIT                                      -*- Automake -*-
# Generated by %s on %s

#
# IMPORTANT NOTE
#
# Any manual change to this file will systematically be overwritten.
# Please modify the %s script or its config file instead.
#

""" % (name,stamp,name)



# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name    = "make-makefiles-inter"
my_configs = [
  "config/specs/corelibs.cf",
  "config/specs/prereqs.cf",
  "config/specs/plugins.cf",
  "config/specs/bindings.cf"]

sep = "# ---------------------------------------------------------------------------- #\n\n"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("src/main/abinit.F90") ):
 print "%s: You must be in the top of an ABINIT source tree." % my_name
 print "%s: Aborting now." % my_name
 sys.exit(1)

# Read config file(s)
for cnf in my_configs:
 if ( os.path.exists(cnf) ):
  execfile(cnf)
 else:
  print "%s: Could not find config file (%s)." % (my_name,cnf)
  print "%s: Aborting now." % my_name
  sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Generate library lists
src_list = ""
lib_list = ""
sub_lib_list = "SUBDIRS ="
pin_list = ""
sub_pin_list = "SUBDIRS ="
bnd_list = ""
sub_bnd_list = "SUBDIRS ="

tgt_abirules = "# Enforce ABINIT Coding Style (the so-called ABIRULES)\n" + \
 "abirules:\n\t@echo 'Reporting possible errors in the abirules procedure'" + \
 " > ,,abirules.log\n"

# Core libraries
for lib in abinit_corelibs:
 if ( lib in corelibs_specs ):
  lib_specs = corelibs_specs[lib]
 else:
  lib_specs = ABI_LIB_NIL

 src_list += " \\\n\t"+lib
 if ( (lib_specs & ABI_LIB_RUL) == 0 ):
  tgt_abirules += "\t@$(PERL) ../util/maintainers/abirules.pl -d %s >> abirules.log\n" % (lib)
 
src_list += " \\\n\tmain\n"
src_list += "if DO_BUILD_NIGHTLY\n SUBDIRS += nightly\nendif\n\n"
tgt_abirules += "\t@$(PERL) ../util/maintainers/abirules.pl -d main >> abirules.log\n"
tgt_abirules += "\tcd .. ; ./config/scripts/abilint . . > src/abilint.log ; cd src\n"
tgt_abirules += "\t@grep 'Error' abirules.log \n\n"

# External required libraries
for lib in abinit_prereqs:
 lib_list += "if DO_BUILD_%s\n prereq_%s = %s\nelse\n prereq_%s =\nendif\n" % \
  (lib.upper(),lib,lib,lib)
 sub_lib_list += " \\\n  $(prereq_%s)" % (lib)

lib_list += "\n"+sub_lib_list+"\n"

# Plug-ins
for lib in abinit_plugins:
 pin_list += "if DO_BUILD_%s\n plugin_%s = %s\nelse\n plugin_%s =\nendif\n" % \
  (lib.upper(),lib,lib,lib)
 sub_pin_list += " \\\n  $(plugin_%s)" % (lib)

pin_list += "\n"+sub_pin_list+"\n"

# Bindings
for lib in abinit_bindings:
 bnd_list += "if DO_BUILD_BINDINGS\n bindings_%s = %s\nelse\n bindings_%s =\nendif\n" % \
  (lib,lib,lib)
 sub_bnd_list += " \\\n  $(bindings_%s)" % (lib)

bnd_list += "\n"+sub_bnd_list+"\n"

# Write intermediate Makefile.am for core source
mf = file("src/Makefile.am","w")
mf.write(makefile_header(my_name,now))
mf.write("SUBDIRS =%s" % (src_list))
mf.write(sep+tgt_abirules)
add = "config/makefiles/src.am"
if ( os.path.exists(add) ):
 mf.write(sep+file(add,"r").read())
mf.close()

# Write intermediate Makefile.am for external libraries
mf = file("prereqs/Makefile.am","w")
mf.write(makefile_header(my_name,now))
mf.write(lib_list)
add = "config/makefiles/prereqs.am"
if ( os.path.exists(add) ):
 mf.write(file(add,"r").read())
mf.close()

# Write intermediate Makefile.am for plug-ins
mf = file("plugins/Makefile.am","w")
mf.write(makefile_header(my_name,now))
mf.write(pin_list)
add = "config/makefiles/plugins.am"
if ( os.path.exists(add) ):
 mf.write(file(add,"r").read())
mf.close()

# Write intermediate Makefile.am for bindings
mf = file("bindings/Makefile.am","w")
mf.write(makefile_header(my_name,now))
mf.write(bnd_list)
add = "config/makefiles/bindings.am"
if ( os.path.exists(add) ):
 mf.write(file(add,"r").read())
mf.close()

