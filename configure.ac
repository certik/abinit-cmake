# -*- Autoconf -*-
#
# Copyright (C) 2005-2008 ABINIT Group (Yann Pouillon)
# All rights reserved.
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autoconf & Automake startup
#

# Initialize Autoconf
AC_PREREQ(2.59)
AC_INIT([ABINIT],[5.6.5],[https://bugs.launchpad.net/abinit/],[abinit])
AC_REVISION([Autotools support for ABINIT 5])
AC_CONFIG_AUX_DIR(config/gnu)
AC_CONFIG_SRCDIR(src/main/abinit.F90)
AC_PREFIX_DEFAULT(/opt/etsf)

# Test suite - DO NOT ACTIVATE !
#AC_CONFIG_TESTDIR(tests)

# ---------------------------------------------------------------------------- #

#
# Startup
#

ABI_MSG_SECTION([Overall startup])

# Initial setup
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.9)
AM_CONFIG_HEADER([config.h])

ABI_INIT_DIRS
ABI_INIT_VERSION
ABI_INIT_CPU_INFO(${target})
ABI_INIT_HEADER

# Get Autotools version information
ABI_INFO_AUTOTOOLS

# Initialization of prerequisite libraries
# (must be performed before option parsing)
ABI_INIT_PREREQS

# Define ABINIT environment variables
ABI_ENV_DEFINE

# Define command-line arguments
ABI_OPTIONS_DEFINE

# Read config file and ensure that priorities are respected
ABI_ENV_BACKUP
ABI_OPTIONS_BACKUP
test "${enable_config_file}" = "" && enable_config_file="yes"
ABI_LOAD_OPTIONS
ABI_OPTIONS_RECALL
ABI_ENV_RECALL

# Set still undefined options
ABI_OPTIONS_SETUP

# Display UI changes
ABI_OPTIONS_CHANGED

# Initialize environment, taking options into account
ABI_ENV_INIT

AC_SUBST(CC_LDFLAGS)
AC_SUBST(CC_LIBS)
AC_SUBST(CXX_LDFLAGS)
AC_SUBST(CXX_LIBS)
AC_SUBST(FC_LDFLAGS)
AC_SUBST(FC_LIBS)

# Initialize install dirs (requires version and config options to be set)
ABI_INIT_INSTALL_DIRS

# Propagate "--enable-all-plugins"
if test "${enable_all_plugins}" = "yes"; then
 AC_MSG_NOTICE([enabling all plug-ins])
 enable_bigdft="yes"
 enable_etsf_io="yes"
 enable_etsf_xc="yes"
 enable_fox="yes"
 enable_netcdf="yes"
 enable_wannier90="yes"
 enable_xmlf90="yes"
fi
if test "${enable_all_plugins}" = "no"; then
 AC_MSG_NOTICE([disabling all plug-ins])
 enable_bigdft="no"
 enable_etsf_io="no"
 enable_etsf_xc="no"
 enable_fox="no"
 enable_netcdf="no"
 enable_wannier90="no"
 enable_xmlf90="no"
fi

# Translate optimisation level
abi_optflags_mode="${enable_optlevel}"

# Set-up required information for core libraries
ABI_CORELIBS_INIT

# ---------------------------------------------------------------------------- #

#
# Check option consistency
#

# NOTE: please hack this section with EXTREME CARE

ABI_MSG_SECTION([Option consistency checking])

# ----------- #
# MPI options #
# ----------- #

abi_optchk_ok="yes"

AC_MSG_NOTICE([checking consistency of MPI options])

# Enable MPI when its sub-options are activated
if test "${enable_mpi_io}" = "yes" -o "${enable_mpi_trace}" = "yes"; then
 if test "${enable_mpi}" = ""; then
  enable_mpi="yes"
  AC_MSG_NOTICE([ |---> enabling MPI support])
  abi_optchk_ok="no"
 fi
fi

# Enable MPI when a search prefix is provided
if test "${enable_mpi}" = "" -a "${with_mpi_prefix}" != ""; then
 if test -d "${with_mpi_prefix}"; then
  enable_mpi="yes"
  AC_MSG_NOTICE([ |---> enabling MPI support])
  abi_optchk_ok="no"
 fi
fi

# Closing remarks
if test "${abi_optchk_ok}" = "yes"; then
 AC_MSG_NOTICE([ |---> all OK])
fi
AC_MSG_NOTICE([])

# ---------------------- #
# External prerequisites #
# ---------------------- #

abi_optchk_ok="yes"

AC_MSG_NOTICE([checking consistency of external prerequisite options])

# Threaded FFTW support requires basic FFTW support
if test "${enable_fftw_threads}" = "yes" -a "${enable_fftw}" != "yes"; then
 enable_fftw="yes"
 AC_MSG_NOTICE([ |---> enabling FFTW support for FFTW_THREADS])
 abi_optchk_ok="no"
fi

# Require FFTW link flags to be set
if test "${enable_fftw}" = "yes" -o "${enable_fftw_threads}" = "yes"; then
 if test "${with_fftw_libs}" = "" -o "${with_fftw_libs}" = "no" -o \
         "${with_fftw_libs}" = "yes"; then
  enable_fftw="no"
  enable_fftw_threads="no"
  with_fftw_libs=""
  AC_MSG_NOTICE([ |---> disabling FFTW support (missing link flags)])
  abi_optchk_ok="no"
 fi
fi

# Closing remarks
if test "${abi_optchk_ok}" = "yes"; then
 AC_MSG_NOTICE([ |---> all OK])
fi
AC_MSG_NOTICE([])

# -------- #
# Plug-ins #
# -------- #

abi_optchk_ok="yes"

AC_MSG_NOTICE([checking consistency of plug-in options])

# The ETSF I/O library requires NetCDF support
if test "${enable_etsf_io}" = "yes" -a "${enable_netcdf}" != "yes"; then
 enable_netcdf="yes"
 AC_MSG_NOTICE([ |---> enabling NetCDF support (required by ETSF I/O library)])
 abi_optchk_ok="no"
fi

# Closing remarks
if test "${abi_optchk_ok}" = "yes"; then
 AC_MSG_NOTICE([ |---> all OK])
fi
AC_MSG_NOTICE([])

# -------------- #
# Nightly builds #
# -------------- #

abi_optchk_ok="yes"

# Silently ignore timeout if Nightly support is disabled
test "${enable_nightly}" != "yes" && with_timeout="0"

# ------------------- #
# Final step: parsing #
# ------------------- #

ABI_OPTIONS_PARSE

# Set-up tricks
enable_tricks_cpp="yes"
enable_tricks_cc="yes"
enable_tricks_cxx="yes"
enable_tricks_fc="yes"
enable_tricks_ar="yes"
enable_tricks_opt="yes"
if test "${enable_tricks}" = "no"; then
 enable_tricks_cpp="no"
 enable_tricks_cc="no"
 enable_tricks_cxx="no"
 enable_tricks_fc="no"
 enable_tricks_ar="no"
 enable_tricks_opt="no"
fi
if test "${enable_tricks}" = "fc-only"; then
 enable_tricks_cpp="no"
 enable_tricks_cc="no"
 enable_tricks_cxx="no"
 enable_tricks_ar="no"
 enable_tricks_opt="no"
fi
if test "${enable_tricks}" = "no-ar"; then
 enable_tricks_ar="no"
fi
if test "${enable_tricks}" = "fc-only"; then
 enable_tricks_cpp="no"
 enable_tricks_cc="no"
 enable_tricks_cxx="no"
 enable_tricks_fc="no"
 enable_tricks_ar="no"
fi

# ---------------------------------------------------------------------------- #

#
# MPI startup
#

# NOTE: This section must be found before the first call to AC_PROG_CC.

ABI_MSG_SECTION([MPI startup])

# Disable MPI if unset
if test "${enable_mpi}" = ""; then
 enable_mpi="no"
fi

# Set MPI environment and check for a generic implementation
ABI_ENV_BACKUP
ABI_MPI_INIT

# Report changes in compiler names
if test "${abi_env_CC}" != "" -a "${CC}" != "${abi_env_CC}"; then
 AC_MSG_NOTICE([CC  = ${CC}])
fi
if test "${abi_env_CXX}" != "" -a "${CXX}" != "${abi_env_CXX}"; then
 AC_MSG_NOTICE([CXX = ${CXX}])
fi
if test "${abi_env_FC}" != "" -a "${FC}" != "${abi_env_FC}"; then
 AC_MSG_NOTICE([FC  = ${FC}])
fi

# EXPERIMENTAL: set LD_LIBRARY_PATH
abi_llp_set=""
abi_llp_fixed=""
if test "${mpi_usable}" = "yes"; then
 abi_llp_set=`echo "${LD_LIBRARY_PATH}" | grep "${with_mpi_prefix}/lib"`
 if test "${abi_llp_set}" = ""; then
  if test -d "${with_mpi_prefix}/lib"; then
   AC_MSG_NOTICE([setting LD_LIBRARY_PATH])
   abi_env_LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
   LD_LIBRARY_PATH="${with_mpi_prefix}/lib:${LD_LIBRARY_PATH}"
   export LD_LIBRARY_PATH
   abi_llp_fixed="yes"
  fi
 fi
else
 ABI_MSG_NOTICE([mpi-support])
fi

# ---------------------------------------------------------------------------- #

#
# Miscellaneous utilities
#

ABI_MSG_SECTION([Utilities])

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_MKDIR_P
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Check for other programs
AC_PATH_PROG(BOURNE_SHELL,sh,/bin/sh)
AC_PATH_PROG(PERL,perl,/bin/false)
AC_PATH_PROG(PYTHON,python,/bin/false)
AC_PATH_PROG(RM,rm,/bin/false)
AC_PATH_PROG(MV,mv,/bin/false)
AC_PATH_PROG(TAR,tar,/bin/false)
AC_PATH_PROG(LATEX,latex,/bin/false)
AC_PATH_PROG(DVI2PS,dvips,/bin/false)
AC_PATH_PROG(DVI2PDF,dvipdf,/bin/false)
AC_PATH_PROG(PS2PDF,ps2pdf,/bin/false)
AC_PATH_PROG(MARKDOWN,markdown,[])
AC_PATH_PROG(WGET,wget,/bin/false)

# Make sure we can use markdown
if test ! -x "${MARKDOWN}"; then
 AC_MSG_NOTICE([using internal version of MarkDown])
 MARKDOWN="${PERL} ${abinit_srcdir}/util/developers/markdown.pl"
fi

# ---------------------------------------------------------------------------- #

#
# Preprocessing
#

ABI_MSG_SECTION([Preprocessing])

# Preserve environment
ABI_ENV_BACKUP

# Look for the default C preprocessor
AC_PROG_CPP
if test "${CPP}" = ""; then
 AC_MSG_ERROR([no C preprocessor found])
fi

# Restore back CPPFLAGS and CFLAGS
CPPFLAGS="${abi_env_CPPFLAGS}"
CFLAGS="${abi_env_CFLAGS}"

# Apply tricks
if test "${enable_tricks_cpp}" = "yes"; then
 ABI_TRICKS_CPP(${target_os})
 if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit preprocessor flags])
  if test "${CPPFLAGS_64BITS}" = ""; then
   AC_MSG_RESULT([none])
  else
   AC_MSG_RESULT([${CPPFLAGS_64BITS}])
   CPP="${CPP} ${CPPFLAGS_64BITS}"
  fi
 else
  CPPFLAGS_64BITS=""
 fi
else
 TRUE_CPP="${CPP}"
 TRUE_CPPFLAGS=""
fi

AC_SUBST(TRUE_CPP)
AC_SUBST(TRUE_CPPFLAGS)

# ---------------------------------------------------------------------------- #

#
# C support
#

ABI_MSG_SECTION([C support])

# Preserve environment
ABI_ENV_BACKUP

# Look for the C compiler
AC_PROG_CC
if test "${CC}" = ""; then
 AC_MSG_ERROR([no C compiler found])
fi
ABI_PROG_CC

# Restore back CFLAGS
CFLAGS="${abi_env_CFLAGS}"

# Fail if no C compiler is available
if test "${CC}" = ""; then
 AC_MSG_ERROR([no C compiler available])
fi

# Apply tricks
if test "${enable_tricks_cc}" = "yes"; then
 ABI_TRICKS_CC(${cc_type},${cc_version})
 if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit C flags])
  if test "${CFLAGS_64BITS}" = ""; then
   AC_MSG_RESULT([none])
  else
   AC_MSG_RESULT([${CFLAGS_64BITS}])
   CC="${CC} ${CFLAGS_64BITS}"
  fi
 else
  CFLAGS_64BITS=""
 fi
fi

# Check for system peculiarities
AC_C_BIGENDIAN

# ---------------------------------------------------------------------------- #

#
# C++ support
#

ABI_MSG_SECTION([C++ support])

# Preserve environment
ABI_ENV_BACKUP

# Look for the C++ compiler
AC_PROG_CXX
if test "${CXX}" = ""; then
 AC_MSG_WARN([no C++ compiler found])
fi
ABI_PROG_CXX

# Restore back CXXFLAGS
CXXFLAGS="${abi_env_CXXFLAGS}"

# Warn if no C compiler is available
if test "${CXX}" = ""; then
 AC_MSG_WARN([no C++ compiler available])
fi

# Apply tricks
if test "${enable_tricks_cxx}" = "yes"; then
 ABI_TRICKS_CXX(${cxx_type},${cxx_version})
 if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit C++ flags])
  if test "${CXXFLAGS_64BITS}" = ""; then
   AC_MSG_RESULT([none])
  else
   AC_MSG_RESULT([${CXXFLAGS_64BITS}])
   CXX="${CXX} ${CXXFLAGS_64BITS}"
  fi
 else
  CXXFLAGS_64BITS=""
 fi
fi

# ---------------------------------------------------------------------------- #

#
# Fortran support
#

ABI_MSG_SECTION([Fortran support])

# Preserve environment
ABI_ENV_BACKUP

# Restore back FCFLAGS
FCFLAGS="${abi_env_FCFLAGS}"

# Check for compiler
AC_PROG_FC
if test "${FC}" = ""; then
 AC_MSG_ERROR([no Fortran compiler found])
fi
ABI_PROG_FC

# Fail if no Fortran compiler is available
if test "${FC}" = ""; then
 AC_MSG_ERROR([no Fortran compiler available])
fi

# Apply tricks as soon as possible
if test "${enable_tricks_fc}" = "yes"; then
 ABI_TRICKS_FC(${fc_type},${fc_version})
 if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit Fortran flags])
  if test "${FCFLAGS_64BITS}" = ""; then
   AC_MSG_RESULT([none])
  else
   AC_MSG_RESULT([${FCFLAGS_64BITS}])
   FC="${FC} ${FCFLAGS_64BITS}"
  fi
 else
  FCFLAGS_64BITS=""
 fi
fi

# Wrap Fortran compiler calls if needed or requested
if test "${enable_fc_wrapper}" = "yes"; then
 fc_wrap="yes"
fi

if test "${fc_wrap}" = "yes"; then
 AC_MSG_NOTICE([Fortran compiler calls will be wrapped])
 if test "${TRUE_CPP}" = ""; then
  AC_MSG_ERROR([the Fortran wrapper requires a working C preprocessor])
 fi
fi

# The IBM Fortran compiler is too buggy to compile standard Fortran 90 files
# The following measure should suffice in most cases (let's hope!)
if test "${fc_type}" = "ibm"; then
 FC_SRCEXT="f"
else
 FC_SRCEXT="F90"
fi

# Check whether top read file list from standard input
if test "${enable_stdin}" = "no"; then
 AC_DEFINE([READ_FROM_FILE],1,[Read file list from a file instead of standard input])
fi

# Determine whether to use C clock for timings
AC_MSG_CHECKING([whether to use C clock for timings])
AM_CONDITIONAL(DO_BUILD_CCLOCK,[test "${enable_cclock}" = "yes"])
if test "${enable_cclock}" = "yes"; then
 AC_DEFINE([USE_CCLOCK],1,[Use C clock instead of Fortran clock for timings])
fi
AC_MSG_RESULT([${enable_cclock}])

# FIXME: set Fortran module extension
MODEXT="mod"
AC_SUBST(MODEXT)

# ---------------------------------------------------------------------------- #

#
# Libraries and linking
#

# NOTE: Do NOT use Libtool, as it is unable to handle Fortran 90 properly.

ABI_MSG_SECTION([Libraries and linking])

# Preserve environment
ABI_ENV_BACKUP

# Disable shared objects (may change in a distant future)
# Note: Libtool-provided macro
#AC_DISABLE_SHARED

# Look for archiver
if test "${AR}" = ""; then
 AC_PATH_PROG(AR,ar)
 test "${AR}" = "/bin/ar" -o "${AR}" = "/usr/bin/ar" && AR="ar"
fi
AC_PROG_RANLIB

# Look for linker (not used for now)
#AC_PROG_LD

# Apply tricks
if test "${enable_tricks_ar}" = "yes"; then
 ABI_TRICKS_AR(${target_os})
 if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit archiver flags])
  if test "${ARFLAGS_64BITS}" = ""; then
   AC_MSG_RESULT([none])
  else
   AC_MSG_RESULT([${ARFLAGS_64BITS}])
   AR="${AR} ${ARFLAGS_64BITS}"
  fi
 else
  ARFLAGS_64BITS=""
 fi
fi

# Restore back compile flags
CFLAGS="${abi_env_CFLAGS}"
CXXFLAGS="${abi_env_CXXFLAGS}"
FCFLAGS="${abi_env_FCFLAGS}"

# We want to be able access the archiver from anywhere
AC_SUBST(AR)
AC_SUBST(ARFLAGS)

# Report the use of libtool-related options
AC_SUBST(enable_shared)
AC_SUBST(enable_static)
AC_SUBST(with_gnu_ld)

# ---------------------------------------------------------------------------- #

#
# 64-bit support
#
# NOTES: 
#
#   * This step requires that the tricks have been applied.
#
#   * Please do not try to set-up the *_64BITS variables manually, as they
#     will systematically be overwritten. These flags should be modified by
#     the --with-64bit-flags option only (see documentation).
#

ABI_MSG_SECTION([64-bit support])

AC_MSG_NOTICE([this section is still under development])
AC_MSG_CHECKING([for a 64-bit architecture])
AC_MSG_RESULT([${abi_cpu_64bits}])

if test "${abi_cpu_64bits}" = "yes"; then
 AC_MSG_CHECKING([at which stage we may use 64-bit flags (not implemented yet)])
 AC_MSG_RESULT([${enable_64bit_flags}])
 AC_MSG_CHECKING([which 64-bit flags to use (not implemented yet)])
 AC_MSG_RESULT([${with_64bit_flags}])
 if test "${enable_64bit_flags}" != "no"; then
  AC_MSG_WARN([64-bit flags currently apply globally])
 fi
else
 enable_64bit_flags="no"
fi

# Reset flags when disabled
if test "${enable_64bit_flags}" = "no"; then
 ARFLAGS_64BITS=""
 CPPFLAGS_64BITS=""
 CFLAGS_64BITS=""
 CC_LDFLAGS_64BITS=""
 CXXFLAGS_64BITS=""
 CXX_LDFLAGS_64BITS=""
 FCFLAGS_64BITS=""
 FC_LDFLAGS_64BITS=""
fi

# ---------------------------------------------------------------------------- #

#
# Optimizations
#
# NOTE:
#
#   * Please do not try to set-up the *FLAGS_OPT variables manually, as they
#     will systematically be overwritten. These flags should be modified by
#     the --with-*-optflags options only.
#

ABI_MSG_SECTION([Optimizations])

# Load optimizations from the optflags database
if test "${enable_debug}" != "yes" -a "${enable_tricks_opt}" = "yes"; then
 if test "${CFLAGS}" = ""; then
  if test "${CFLAGS_OPT}" = ""; then
   ABI_LOAD_OPTFLAGS(cc,${cc_type},${cc_version},${abi_cpu_model})
  else
   AC_MSG_NOTICE(using C optimizations read from command-line)
  fi
 else
  AC_MSG_NOTICE([no C optimizations - using provided CFLAGS instead])
  CFLAGS_OPT=""
 fi
 if test "${CXXFLAGS}" = ""; then
  if test "${CXXFLAGS_OPT}" = ""; then
   ABI_LOAD_OPTFLAGS(cxx,${cxx_type},${cxx_version},${abi_cpu_model})
  else
   AC_MSG_NOTICE(using C++ optimizations read from command-line)
  fi
 else
  AC_MSG_NOTICE([no C++ optimizations - using provided CXXFLAGS instead])
  CXXFLAGS_OPT=""
 fi
 if test "${FCFLAGS}" = ""; then
  if test "${FCFLAGS_OPT}" = ""; then
   ABI_LOAD_OPTFLAGS(fc,${fc_type},${fc_version},${abi_cpu_model})
  else
   AC_MSG_NOTICE(using Fortran optimizations read from command-line)
  fi
 else
  AC_MSG_NOTICE([no Fortran optimizations - using provided FCFLAGS instead])
  FCFLAGS_OPT=""
 fi
else
 AC_MSG_NOTICE([optimizations have been turned off])
fi

# Activate debug mode if requested
if test "${enable_debug}" = "yes"; then
 CFLAGS_OPT="-O0"
 CC_LDFLAGS_OPT=""
 CXXFLAGS_OPT="-O0"
 CXX_LDFLAGS_OPT=""
 FCFLAGS_OPT="-O0"
 FC_LDFLAGS_OPT=""
 ARFLAGS_OPT=""

 # Define preprocessing option
 AC_DEFINE([DEBUG_MODE],1,[Define to 1 to turn on debug mode])
 AC_MSG_NOTICE([debug mode activated])
fi

# Turn-on debug symbols if requested
if test "${enable_debug}" = "yes" -o "${enable_debug}" = "symbols"; then
 if test "${ac_cv_prog_cc_g}" = "yes"; then
  CFLAGS_OPT="-g ${CFLAGS_OPT}"
 fi
 if test "${ac_cv_prog_cxx_g}" = "yes"; then
  CXXFLAGS_OPT="-g ${CXXFLAGS_OPT}"
 fi
 if test "${ac_cv_prog_fc_g}" = "yes"; then
  FCFLAGS_OPT="-g ${FCFLAGS_OPT}"
 fi
fi

# Enable per-directory Fortran optimizations
if test "${FCFLAGS}" = ""; then
 ABI_OPTFLAGS_DIRS([${FCFLAGS_OPT}])
else
 AC_MSG_NOTICE([per-directory Fortran optimizations replaced by FCFLAGS])
fi

# ---------------------------------------------------------------------------- #

#
# Save configuration
#

# Set-up target and binary package names
# Note: requires knowledge of Fortran compiler
ABI_INIT_TARGET
ABINIT_BINARY_PACKAGE="${PACKAGE}-${VERSION}_${ABINIT_TARGET}"
AC_SUBST(ABINIT_BINARY_PACKAGE)

# Final adjustments of C and C++ compiler flags
# Fortran: FCFLAGS_OPT must not be included (per-directory optimizations)
test "${ARFLAGS}" = "" && \
 ARFLAGS="${ARFLAGS_64BIT} ${ARFLAGS_OPT} ${ARFLAGS_EXTRA} ${ARFLAGS_CMD}"
test "${CPPFLAGS}" = "" && \
 CPPFLAGS="${CPPFLAGS_64BITS} ${CPPFLAGS_OPT} ${CPPFLAGS_EXTRA}"
test "${CFLAGS}" = "" && \
 CFLAGS="${CFLAGS_64BITS} ${CFLAGS_OPT} ${CFLAGS_EXTRA}"
test "${CC_LDFLAGS}" = "" && \
 CC_LDFLAGS="${CC_LDFLAGS_64BITS} ${CC_LDFLAGS_OPT} ${CC_LDFLAGS_EXTRA}"
test "${CC_LIBS}" = "" && \
 CC_LIBS="${CC_LIBS_64BITS} ${CC_LIBS_OPT} ${CC_LIBS_EXTRA}"
test "${CXXFLAGS}" = "" && \
 CXXFLAGS="${CXXFLAGS_64BITS} ${CXXFLAGS_OPT} ${CXXFLAGS_EXTRA}"
test "${CXX_LDFLAGS}" = "" && \
 CXX_LDFLAGS="${CXX_LDFLAGS_64BITS} ${CXX_LDFLAGS_OPT} ${CXX_LDFLAGS_EXTRA}"
test "${CXX_LIBS}" = "" && \
 CXX_LIBS="${CXX_LIBS_64BITS} ${CXX_LIBS_OPT} ${CXX_LIBS_EXTRA}"
test "${FCFLAGS}" = "" && \
 FCFLAGS="${FCFLAGS_64BITS} ${FCFLAGS_EXTRA}"
test "${FC_LDFLAGS}" = "" && \
 FC_LDFLAGS="${FC_LDFLAGS_64BITS} ${FC_LDFLAGS_OPT} ${FC_LDFLAGS_EXTRA}"
test "${FC_LIBS}" = "" && \
 FC_LIBS="${FC_LIBS_64BITS} ${FC_LIBS_OPT} ${FC_LIBS_EXTRA}"

# ---------------------------------------------------------------------------- #

#
# MPI support
#

ABI_MSG_SECTION([MPI support])

# Check whether MPI is usable
ABI_MPI_CHECK

# Display MPI status
AC_MSG_CHECKING([whether MPI is usable])
AC_MSG_RESULT([${mpi_usable}])
AC_MSG_CHECKING([whether to build parallel code])
AC_MSG_RESULT([${enable_mpi}])

# Adjust MPI flags
if test "${enable_mpi}" = "yes"; then
 MPI_CPPFLAGS="${CPPFLAGS} ${MPI_CPPFLAGS}"
 MPI_CFLAGS="${CFLAGS} ${MPI_CFLAGS}"
 MPI_CXXFLAGS="${CXXFLAGS} ${MPI_CXXFLAGS}"
 MPI_FCFLAGS="${FCFLAGS} ${MPI_FCFLAGS}"
 #MPI_CC_LDFLAGS="${CC_LDFLAGS} ${MPI_CC_LDFLAGS}"
 #MPI_CXX_LDFLAGS="${CXX_LDFLAGS} ${MPI_CXX_LDFLAGS}"
 #MPI_FC_LDFLAGS="${FC_LDFLAGS} ${MPI_FC_LDFLAGS}"
 #MPI_CC_LIBS="${CC_LIBS} ${MPI_CC_LIBS}"
 #MPI_CXX_LIBS="${CXX_LIBS} ${MPI_CXX_LIBS}"
 #MPI_FC_LIBS="${FC_LIBS} ${MPI_FC_LIBS}"
 test "${MPI_RUNNER}" = "" && MPI_RUNNER="/bin/false"
fi

# All MPI preprocessing options must be found on the compiler command line
if test "${enable_mpi}" = "yes"; then
 # Enable MPI I/O if requested
 if test "${enable_mpi_io}" = "yes"; then
  AC_MSG_NOTICE([activating parallel I/O])
  MPI_CPPFLAGS="${MPI_CPPFLAGS} -DMPI_IO=1"
 fi

 # Enable MPI time tracing if requested
 if test "${enable_mpi_trace}" = "yes"; then
  AC_MSG_NOTICE([activating parallel time tracing])
  MPI_CPPFLAGS="${MPI_CPPFLAGS} -DMPI_TRACE=1"
 fi

 # Select MPI level
 if test "${with_mpi_level}" != ""; then
  AC_MSG_NOTICE([forcing MPI-${with_mpi_level} standard support])
  if test "${with_mpi_level}" != "${mpi_level}"; then
   AC_MSG_WARN([detected MPI-${mpi_level} support but using MPI-${with_mpi_level} instructions])
  fi
  mpi_level="${with_mpi_level}"
 fi
 MPI_CPPFLAGS="-DMPI${mpi_level}=1 ${MPI_CPPFLAGS}"

 # Define MPI CPP trigger
 MPI_CPPFLAGS="-DMPI=1 ${MPI_CPPFLAGS}"

 # Report MPI CPPFLAGS
 AC_MSG_NOTICE([MPI CPPFLAGS > ${MPI_CPPFLAGS}])
else
 enable_mpi_fft="no"
 enable_mpi_io="no"
 enable_mpi_trace="no"
fi

# Define condition
AM_CONDITIONAL(DO_BUILD_PARALLEL,[test "${enable_mpi}" = "yes"])

# ---------------------------------------------------------------------------- #

#
# Buggy Fortran compilers
#

# Wrap buggy Fortran compilers (MPI checks must be completed)
FC_NOWRAP="${FC}"
if test "${fc_wrap}" = "yes"; then
 FC="${abinit_builddir}/config/wrappers/wrap-fc"
fi
AC_SUBST(FC_NOWRAP)

# Force F77 and F90 environment variables (keep always last)
F77="${FC}"
FFLAGS="${FCFLAGS}"
F90="${FC}"
F90FLAGS="${FCFLAGS}"

# The following is required for old fixed-form Fortran libraries
AC_SUBST(F77)
AC_SUBST(FFLAGS)

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# External prerequisites
#

# FIXME: update enable_tricks
test "${enable_tricks}" = "no-ar" && enable_tricks="yes"

ABI_MSG_SECTION([External prerequisites])

# External FFT support (FFTW for now)
ABI_PREREQ_FFT

                    # ------------------------------------ #

# Linear algebra support (BLAS and LAPACK)
ABI_PREREQ_LINALG

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Plug-ins
#

# NOTE: the configuration has to be saved already, in order to transmit the
#       right build parameters to the embedded packages

ABI_MSG_SECTION([Plug-ins])

# Make sure ~/.abinit/plugins exists
if test "${with_plugins_tardir}" != ""; then
 abinit_tardir="${with_plugins_tardir}"
fi
if test "${abinit_tardir}" = ""; then
 abinit_tardir="${HOME}/.abinit/tarballs"
 if test ! -e "${abinit_tardir}"; then
  AC_MSG_NOTICE([creating ${abinit_tardir}])
  ${MKDIR_P} "${abinit_tardir}"
 fi
fi
AC_MSG_NOTICE([using tarball repository ${abinit_tardir}])
AC_SUBST(abinit_tardir)

# Display prefix for for already installed plug-ins
if test "${with_plugins_prefix}" != ""; then
 AC_MSG_NOTICE([using prefix ${with_plugins_prefix}])
fi

# Check consistency
if test "${enable_etsf_io}" = "yes"; then
 if test "${enable_netcdf}" != "yes"; then
  AC_MSG_NOTICE([enabling NetCDF support (for ETSF I/O)])
  enable_netcdf="yes"
 fi
fi

# ---------------------------------------------------------------------------- #

#
# Wavelets support - BigDFT project
#

ABI_PLUGIN_BIGDFT

# ---------------------------------------------------------------------------- #

#
# NetCDF support
#

# Experimental: custom configure options
CONFIGOPT_NETCDF=""
AC_SUBST(CONFIGOPT_NETCDF)

ABI_PLUGIN_NETCDF

# ---------------------------------------------------------------------------- #

#
# ETSF I/O library support
#

ABI_PLUGIN_ETSF_IO

# ---------------------------------------------------------------------------- #

#
# ETSF exchange-correlation library support
#

ABI_PLUGIN_ETSF_XC

# ---------------------------------------------------------------------------- #

#
# XML file I/O support
#

if test "${fc_type}" = "sun"; then
 enable_fox="no"
 AC_MSG_WARN([FoX does not support moving .mod files => disabled])
fi
ABI_PLUGIN_FOX

# ---------------------------------------------------------------------------- #

#
# XML Fortran 90 support
# Note: this library is not developed anymore
#

if test "${fc_type}" = "sun"; then
 enable_xmlf90="no"
 AC_MSG_WARN([XMLF90 does not support moving .mod files => disabled])
fi
ABI_PLUGIN_XMLF90

# ---------------------------------------------------------------------------- #

#
# Wannier90 support
#

ABI_PLUGIN_WANNIER90

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Nightly builds
#

ABI_MSG_SECTION([Nightly builds])

AC_MSG_CHECKING([whether to build Nightly code])
AC_MSG_RESULT([${enable_nightly}])

# Check for headers (required for Nigthly)
if test "${enable_nightly}" = "yes"; then
 AC_LANG_PUSH([C])
 AC_HEADER_STDC
 AC_CHECK_HEADER([stdio.h],
  [AC_DEFINE([HAVE_STDIO_H], 1,[Define to 1 if you have <stdio.h>.])],
  [enable_nightly="no"])
 AC_CHECK_HEADER([signal.h],
  [AC_DEFINE([HAVE_SIGNAL_H], 1,[Define to 1 if you have <signal.h>.])],
  [enable_nightly="no"])
 if test "${enable_nightly}" = "no"; then
  AC_MSG_WARN([nightly build support has been disabled])
 fi
 AC_LANG_POP
fi

# Set timeout for tests
if test "${enable_nightly}" = "yes"; then
 AC_MSG_CHECKING([timeout for automatic tests])
 nightly_timeout="${with_timeout}"
 test "${with_timeout}" = "yes" && nightly_timeout="600"
 test "${with_timeout}" = "no" -o "${with_timeout}" = "" && nightly_timeout="0"
 if test "${nightly_timeout}" = "0"; then
  AC_MSG_RESULT([none])
 else
  AC_MSG_RESULT([${nightly_timeout} seconds])
 fi
else
 nightly_timeout=""
fi

AC_SUBST(nightly_timeout)

AM_CONDITIONAL(DO_BUILD_NIGHTLY,[test "${enable_nightly}" = "yes"])

# ---------------------------------------------------------------------------- #

#
# Experimental developments
#

ABI_MSG_SECTION([Experimental developments])

# Bindings
AC_MSG_CHECKING([whether to enable bindings])
if test "${enable_bindings}" = "yes"; then
 AC_DEFINE([HAVE_BINDINGS],1,[Define to 1 if you want to use bindings])
fi
AC_MSG_RESULT([${enable_bindings}])
AM_CONDITIONAL(DO_BUILD_BINDINGS,[test "${enable_bindings}" = "yes"])

# Error handlers
AC_MSG_CHECKING([whether to enable error handlers])
if test "${enable_error_handlers}" = "yes"; then
 AC_DEFINE([HAVE_ERROR_HANDLERS],1,[Define to 1 if you want to use internal error handlers])
fi
AC_MSG_RESULT([${enable_error_handlers}])
AM_CONDITIONAL(DO_BUILD_ERROR_HANDLERS,[test "${enable_error_handlers}" = "yes"])

# Double precision in GW
AC_MSG_CHECKING([whether to enable GW double-precision calculations])
if test "${enable_gw_dpc}" = "yes"; then
 AC_DEFINE([HAVE_GW_DPC],1,[Define to 1 if you want to perform double-precision GW calculations])
fi
AC_MSG_RESULT([${enable_gw_dpc}])

# ScaLAPACK support
if test "${enable_mpi}" = "no"; then
 if test "${enable_scalapack}" = "yes"; then
  AC_MSG_NOTICE([MPI disabled => disabling ScaLAPACK support])
 fi
 enable_scalapack="no"
fi
AC_MSG_CHECKING([whether to activate ScaLAPACK support])
AC_MSG_RESULT([${enable_scalapack}])
if test "${enable_scalapack}" = "yes"; then
 MPI_CPPFLAGS="${MPI_CPPFLAGS} -DHAVE_SCALAPACK=1"
 AC_MSG_NOTICE([MPI CPPFLAGS > ${MPI_CPPFLAGS}])
 lib_linalg_includes="${with_scalapack_includes} ${lib_linalg_includes}"
 lib_linalg_libs="${with_scalapack_libs} ${lib_linalg_libs}"
fi

# ---------------------------------------------------------------------------- #

#
# Output configuration
#

ABI_MSG_SECTION([Output])

# Output files
# Note: later, add tests/atconfig and tests/atlocal for test suite
ABI_OUTPUT

# The end
ABI_MSG_FC_BUGGY(${fc_type})
if test "${abi_llp_fixed}" = "yes"; then
 ABI_MSG_NOTICE([mpi-generic])
fi
ABI_MSG_END
