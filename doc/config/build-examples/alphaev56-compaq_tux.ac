#
# Generic config file for ABINIT (documented template)
#
# After editing this file to suit your needs, you may save it as
# "~/.abinit/build/<hostname>.ac" to keep these parameters as per-user
# defaults. Just replace "<hostname>" by the name of your machine,
# excluding the domain name.
#
# Example: if your machine is called "myhost.mydomain", you will save
#          this file as "~/.abinit/build/myhost.ac".
#
# You may put this file at the top level of an ABINIT source tree as well,
# in which case its definitions will apply to this particular tree only.
#
# Hint: If you do not know the name of your machine, just type "hostname".
#

#
# IMPORTANT NOTES
#
# 1. It may happen that this file is outdated. In such a case, the best is
#    to refer to the command-line options of the "configure" script. To
#    obtain a complete list of these options, just type "./configure --help"
#    from the top source directory of ABINIT.
#
# 2. Setting CPPFLAGS, CFLAGS, CXXFLAGS, or FCFLAGS manually is not
#    recommended and will override any other mechanism involved in their
#    configuration. A gentler way to do is to use the "--with-*-optflags"
#    command-line options of the "configure" script. See below for details.
#
# 3. Do not forget to remove the leading "#" on a line when you customize
#    an option.
#

# ---------------------------------------------------------------------------- #
# Global build options                                                         #
# ---------------------------------------------------------------------------- #

# Enable 64-bit compiler flags (default is no)
#
# Note:
#
#     * when necessary, fine-grained tuning may be achieved by setting
#       the CPPFLAGS_64BITS, CFLAGS_64BITS, CXXFLAGS_64BITS, and
#       FCFLAGS_64BITS variables manually
#
#enable_64bit_flags="yes"

# Specify where to apply 64-bit flags (default is unset)
#
# Allowed values:
#
#     * ar  : apply to archiver
#     * cpp : apply to preprocessor
#     * cc  : apply to C compiler
#     * cxx : apply to C++ compiler
#     * fc  : apply to Fortran compiler
#
# WARNING: this is not implemented yet
#
#with_64bit_flags="cc:cxx"

# Enable debug mode (default is symbols)
#
# Allowed values:
#
#     * no      : optimise code and strip debugging symbols
#     * symbols : optimise code and keep debugging symbols (if possible)
#     * yes     : disable all optimisation mechanisms and be verbose
#
#enable_debug="yes"

# Select optimisation level whenever possible (default is standard)
#
# Supported levels:
#
#     * safe       : build slow and very reliable code
#     * standard   : build fast and reliable code
#     * aggressive : build very fast code, regardless of reliability
#
# Note:
#
#     * this option is ignored when debug mode is set to "yes"
#
#enable_optlevel="aggressive"

# Enable compiler tricks (default is yes)
#
# Allowed values:
#
#     * no       : do not apply any trick
#     * yes      : apply all available tricks
#     * fc-only  : only apply Fortran tricks
#     * no-ar    : do not apply library archiver tricks
#     * opt-only : only apply optimisation tricks
#
#enable_tricks="no"

# Where to install ABINIT (default is /opt/etsf)
#
# Note:
#
#     * the files will be installed in ${prefix}/abinit/x.y/, where
#       x and y are respectively the major and minor version numbers
#       of ABINIT
#
#prefix="${HOME}/dft"

# ---------------------------------------------------------------------------- #
# Preprocessing                                                                #
# ---------------------------------------------------------------------------- #

# C preprocessor (should not be set in most cases)
#
#CPP="/usr/bin/cpp"

# Set preprocessing options for optimisations (overrides auto-detection)
#
#with_cpp_optflags="-DFOO"

# ---------------------------------------------------------------------------- #
# C support                                                                    #
# ---------------------------------------------------------------------------- #

# C compiler
#
CC="gcc"

# Set optimizations for C source files (overrides auto-detection)
#
#with_cc_optflags="-O3"

# Prepend link flags for C binaries (default is unset)
#
#with_cc_ld_optflags="-Bstatic"

# Append libraries to link C binaries (default is unset)
#
#with_cc_ld_optlibs="-lrt"

# ---------------------------------------------------------------------------- #
# C++ support                                                                  #
# ---------------------------------------------------------------------------- #

# C++ compiler
#
CXX="g++"

# Set optimizations for C++ source files (overrides auto-detection)
#
#with_cxx_optflags="-O3"

# Prepend link flags for C++ binaries (default is unset)
#
#with_cxx_ld_optflags="-Bstatic"

# Append libraries to link C++ binaries (default is unset)
#
#with_cxx_ld_optlibs="-lblitz"

# ---------------------------------------------------------------------------- #
# Fortran support                                                              #
# ---------------------------------------------------------------------------- #

# Fortran compiler
#
FC="f90"

# Set optimizations for Fortran source files (overrides auto-detection)
#
with_fc_optflags="-O4 -arch host -tune host"

# Prepend link flags for Fortran binaries (default is unset)
#
#with_fc_ld_optflags="-Bstatic"

# Append libraries to link Fortran binaries (default is unset)
#
#with_fc_ld_optlibs="-lsvml"

# Fortran compiler vendor to use when installing modules (default is unset)
#
# Notes:
#
#     * Fortran modules will be installed under $(includedir)/<fc_vendor>,
#       in order to address incompatibilities between Fortran compilers
#
#     * do not use if you don't know what it is about
#
# WARNING: this is still under development
#
#with_fc_vendor="dummy"

# Use C clock instead of Fortran clock for timings
#
#enable_cclock="yes"

# Choose whether to read file lists from standard input or "ab.files"
# (default is yes = standard input)
#
#enable_stdin="no"

# Wrap Fortran compiler calls (default is auto-detected)
# Combine this option with enable_debug="yes" to keep preprocessed source
# files (they are removed by default, except if their build fails)
#
#enable_fc_wrapper="yes"

# Set per-directory Fortran optimizations (useful when a Fortran compiler
# crashes during the build)
#
# Note: this option is not available through the command line
#
#fcflags_opt_21drive="-O0"

# ---------------------------------------------------------------------------- #
# Libraries and linking                                                        #
# ---------------------------------------------------------------------------- #

# Set archiver name
#
#AR="xiar"

# Set optimisations for archiver (default is unset)
#
#with_ar_optflags="-X"

# ---------------------------------------------------------------------------- #
# MPI support                                                                  #
# ---------------------------------------------------------------------------- #

# Determine whether to build parallel code (default is unset)
#
#  * enable_mpi=no     : disable MPI support
#  * enable_mpi=yes    : let the configure script auto-detect MPI support
#  * enable_mpi=native : only look for a native MPI compiler support
#  * enable_mpi=manual : specify MPI settings manually
#
# If left unset, the build system will take all appropriate decisions by
# itself, which will result in disabling MPI support if no other option
# is specified
#
#enable_mpi="yes"

# Activate parallel I/O (default is no)
# WARNING: this feature is still under development
#enable_mpi_io="yes"

# Activate MPI time tracing (default is no)
# WARNING: this feature is still under development
#enable_mpi_trace="yes"

# Look for the MPI library in <prefix>/lib (default is unset)
# This is required for MPI support if your Fortran compiler has no native
# MPI support
#
with_mpi_prefix="/usr/local/mpich-1.2.6"

#
# If your MPI installation is not detected, you may set the following
# variables manually
#

# Set MPI standard level (default is auto-detected)
# Note: usually 1 for MPICH or LAM, 2 for OpenMPI
#
#with_mpi_level="2"

# Set MPI-specific preprocessing flags (default is unset)
#
#with_mpi_cppflags=""

# Set MPI-specific C compile flags (default is unset)
#
#with_mpi_cflags=""

# Set MPI-specific C link flags to prepend (default is unset)
#
#with_mpi_cc_ldflags="-Bstatic"

# Set MPI-specific libraries to append to C linker (default is unset)
#
#with_mpi_cc_libs="-lmpi"

# Set MPI-specific C++ compile flags (default is unset)
#
#with_mpi_cxxflags=""

# Set MPI-specific C++ link flags to prepend (default is unset)
#
#with_mpi_cxx_ldflags="-Bstatic"

# Set MPI-specific libraries to append to C++ linker (default is unset)
#
#with_mpi_cxx_libs="-lmpi++ -lmpi"

# Set MPI-specific Fortran compile flags (default is unset)
#
#with_mpi_fcflags=""

# Set MPI-specific Fortran link flags (default is unset)
#
#with_mpi_fc_ldflags="-Bstatic"

# Set MPI-specific libraries to append to Fortran linker (default is unset)
#
#with_mpi_fc_libs="-lmpif90 -lmpi"

# Set MPI Runner for tests (default is unset)
#
#with_mpi_runner="/usr/local/bin/mpiexec"

# ---------------------------------------------------------------------------- #
# External libraries                                                           #
# ---------------------------------------------------------------------------- #

# Enable FFTW library support (default is no)
#
#enable_fftw="no"

# Enable threaded FFTW library support (default is no)
#
# Note: will be ignored if "enable_fftw" is set to "no"
#
#enable_fftw_threads="no"

# Include flags for the FFTW library (default is unset)
#
#with_fftw_includes="-I/usr/local/include/fftw"

# Link flags for the FFTW library (default is unset)
#
#with_fftw_libs="-L/usr/local/lib/fftw -lfftw3"

                       # ------------------------------ #

# Enable BLAS and LAPACK linear algebra libraries support (default is yes)
#
# Notes:
#
#     * disabling them might break the build
#     * this option will be removed soon
#
#enable_linalg="no"

# Link flags for BLAS and LAPACK linear algebra libraries (default is unset)
#
#with_linalg_libs="-L/usr/local/lib -lblas -llapack"

# Type of linear algebra libraries to use (default is unset)
# Under development - USE AT YOUR OWN RISKS!
#
# Supported libraries:
#
#    * acml      (not implemented)
#    * asl       (not implemented)
#    * atlas     (untested)
#    * cxml      (not implemented)
#    * essl      (should work)
#    * mkl       (not implemented)
#    * mlib      (not implemented)
#    * sgimath   (not implemented)
#    * sunperf   (not implemented)
#
#with_linalg_type="atlas"

# Enable SCALapack support (default is no)
#
#enable_scalapack="yes"

# Include flags for the SCALapack library (default is unset)
#
#with_scalapack_includes="-I/usr/local/include/scalapack"

# Link flags for the SCALapack library (default is unset)
#
#with_scalapack_libs="-L/usr/local/lib/scalapack -lscalapack -lblacs"

# ---------------------------------------------------------------------------- #
# Plug-ins                                                                     #
# ---------------------------------------------------------------------------- #

# Look for the plug-in components in <prefix>/bin, <prefix>/include
# and <prefix>/lib (default is unset)
#
#with_plugins_prefix="/opt/etsf/abinit-plugins"

# Set local repository where to look for plug-in tarballs (default is
# ~/.abinit/tarballs)
#
#with_plugins_tardir="/opt/etsf/abinit-plugins/tarballs"

                       # ------------------------------ #

# Enable BigDFT support (default is yes)
#
#enable_bigdft="no"

# Include flags for the BigDFT library (default is unset)
#
#with_bigdft_includes="-I/usr/local/include/bigdft"

# Link flags for the BigDFT library (default is unset)
#
#with_bigdft_libs="-L/usr/local/lib/bigdft -lbigdft -lpoissonsolver"

                       # ------------------------------ #

# Enable FoX support (default is no)
#
#enable_fox="yes"

# Include flags for the FoX library (default is unset)
#
#with_fox_includes="-I/usr/local/include/fox"

# Link flags for the FoX library (default is unset)
#
#with_fox_libs="-L/usr/local/lib/fox -lFoX_wxml -lFoX_wcml -lFoX_utils -lFoX_sax -lFoX_common -lfsys"

                       # ------------------------------ #

# Enable Nanoquanta/ETSF I/O library support (default is yes)
#
enable_etsf_io="no"

# Include flags for the Nanoquanta/ETSF I/O library (default is unset)
#
#with_etsf_io_includes="-I/opt/etsf/include"

# Link flags for the Nanoquanta/ETSF I/O library (default is unset)
#
#with_etsf_io_libs="-L/opt/etsf/lib -letsf_io"

                       # ------------------------------ #

# Enable Nanoquanta/ETSF XC library support (default is no)
#
#enable_etsf_xc="yes"

# Include flags for the Nanoquanta/ETSF XC library (default is unset)
#
#with_etsf_xc_includes="-I/opt/etsf/include"

# Link flags for the Nanoquanta/ETSF XC library (default is unset)
#
#with_etsf_xc_libs="-L/opt/etsf/lib -letsf_xc"

                       # ------------------------------ #

# Enable NetCDF support (default is yes)
#
enable_netcdf="no"

# Include flags for the NetCDF library (default is unset)
#
#with_netcdf_includes="-I/usr/local/include/netcdf"

# Link flags for the NetCDF library (default is unset)
#
#with_netcdf_libs="-L/usr/local/lib/netcdf -lnetcdf"

                       # ------------------------------ #

# Enable Wannier90 support (default is yes)
#
#enable_wannier90="no"

# Full path for the Wannier90 binary (default is unset)
#
#with_wannier90="/usr/local/bin/wannier90"

# Include flags for the Wannier90 library (default is unset)
#
#with_wannier90_includes="-I/usr/local/include/wannier90"

# Link flags for the Wannier90 library (default is unset)
#
#with_wannier90_libs="-L${HOME}/lib/wannier90 -lwannier90"

                       # ------------------------------ #

# Enable XMLF90 library support (default is no)
#
#enable_xmlf90="yes"

# Include flags for the XMLF90 library (default is unset)
#
#with_xmlf90_includes="-I${HOME}/include/xmlf90"

# Link flags for the XMLF90 library (default is unset)
#
#with_xmlf90_libs="-L${HOME}/lib/xmlf90 -lxmlf90"

# ---------------------------------------------------------------------------- #
# Developer options                                                            #
# ---------------------------------------------------------------------------- #

# Note: all the following options are disabled by default

# Enable error handlers (gmatteo)
#
#enable_error_handlers="yes"

# Enable double precision for GW calculations (gmatteo)
#
#enable_gw_dpc="yes"

# ---------------------------------------------------------------------------- #
# Maintainer options                                                           #
# ---------------------------------------------------------------------------- #

# Activate support for all plug-ins (default is unset)
#
# Warning: setting this option to "no" will disable plug-in support
#
#enable_all_plugins="yes"

# Activate nightly build support (default is no)
#
#enable_nightly="yes"

# Set timeout for automatic tests (default is 600)
#
# Note: this option requires Nightly to be activated
#
#with_timeout="1200"

# Enable dependency tracking (Automake feature)
# Though the exact outcome of this is not known at present, you may
# turn it on if you have a taste for adventure ;-)
#
#enable_dependency_tracking="yes"
